extensions [GIS csv]

globals [basemap-farm centroid-envelope 
  current-timestep total-timesteps
  iv iv-values-for-the-day
  spillover-threshold spillover-interval
  spillover_gm_name
  new-hum-spillover-infc
]

breed [ animalfarms animalfarm ]

animalfarms-own [node gm_name csvindex]

; Reads boris' animal farms as breeds and sets their properties such as node, gm_name, csvindex
to read-farm-map-data
  ;; Load the shapefile
  set basemap-farm gis:load-dataset "data/input/farm_data/preprocessed_farm.shp"

  ;; Draw the dataset on the NetLogo world
  gis:set-drawing-color 3
  gis:draw basemap-farm 1

  ;; Align NetLogo world with the dataset's extent
  ; The centroid-envelope is obtained using python script
  set centroid-envelope [1391399.65463144 1624957.91445851 535708.42576842 853387.50384582]
  gis:set-world-envelope centroid-envelope
  
  ; Open the csv file
  file-open "data/input/farm_data/iv_table.csv"
  
  let csv-node-row file-read-line
  let node-values csv:from-row csv-node-row  ;

  ;;Create turtles from all the points in the centroid dataset
  foreach gis:feature-list-of basemap-farm [[vector-feature]->
    let location gis:location-of (first (first (gis:vertex-lists-of vector-feature)))
      create-animalfarms 1 [
    set shape "circle"
    set color [0 0 255 0]
    set xcor item 0 location
    set ycor item 1 location
    set size 0.15
      
    ; Setting node id of the object
    ;let node_id gis:property-value vector-feature "node" 
    set node gis:property-value vector-feature "node" ;! Might be redundant since we are only using it to determine the csvindex
    
    ; Setting gm name
    ;let gm_id gis:property-value vector-feature "gm_id" 
    set gm_name gis:property-value vector-feature "Name" 
      
    ; The index of the nodes' iv values in the csv value will correspond to the
    ; position of the node in the first row of the read line
    let index position node node-values
    set csvindex index
  ]]
  
  file-close
end

to load-spillover-time-stamps
  set total-timesteps 120 ; Total number of days of IV data (number of rows in iv csv file)
  set spillover-threshold 1000 ; Spillover only occurs when num of animal infections exceeds this
  set spillover-interval 7; in days. Spillover infections occur every n days as defined by this variable
end

; Loads animal farm infections for a given day
; Updates the color of the animal farms and also introduces spillover infections
to load-animal-farm-infections
  
  ;
  if ticks = total-timesteps [
    print(word "Day " ticks ": Last day for which we have Boris' animal farm data")
  ]
  
  if ticks > total-timesteps  [
    stop
  ]

  file-open "data/input/farm_data/iv_table.csv"
  let header-line file-read-line ; Skipping the header line
  
  let target-row ticks + 1 ;Row indexing starts from 1 excluding the header
  let current-row 0
  let line ""
  
  ; Skip rows until we reach the target row
  while [current-row < target-row] [
    if file-at-end? [ stop ] ; Stop if the file ends early
    set line file-read-line
    set current-row current-row + 1
  ]
  
  ; Target row reached, reading in the IV values for that day
  if current-row = target-row [
    set iv-values-for-the-day csv:from-row line ; Parse the CSV row into a list
    
    ; Assign IV values to turtles
    ask animalfarms [
      set-animal-farm-color
      
      if (ticks mod spillover-interval = 0) [
        set spillover_gm_name gm_name

        update-num-animal-infc-gm
        create-spillover-infc-animal-human-gm
      ]
    ]
  ]  
  file-close
end

; Procedure to set animal farm color based on number of infections
to set-animal-farm-color
  set iv item csvindex iv-values-for-the-day ; Assign each turtle its corresponding IV value using its csvindex
  
  ; When transmission occurs
  ifelse iv >= spillover-threshold [
    set color red
  ] [
    ; increase of transmission is higher
    ifelse iv > 700 and iv < 1000 [
      set color orange
    ] [
      ifelse iv >= 300 and iv <= 700 [
        set color yellow
      ] [
        ; Transmission is unlikely
        set color [0 0 255 0]
      ]
    ]
  ]
end

; Procedure to update a specific gemeente's number of animal infection
to update-num-animal-infc-gm
  ask municipalities with [name = spillover_gm_name][
    set totalinfectedanimals totalinfectedanimals + iv
  ]
end

; Procedure to introduce spillover infection from one animal-farm to a specific gm
to create-spillover-infc-animal-human-gm
  ask municipalities with [name = spillover_gm_name] [
    
    ; Introducing one new human infection whenever iv > spillover-threshold
    (ifelse iv > spillover-threshold [
      set new-hum-spillover-infc 1

      ; Increasing the number of total spillover infections by 1
      set totalspilloveranimalhumaninfections totalspilloveranimalhumaninfections + 1

      ; Introducing spillover infection based on the spillover-group
      if (spillover-group = "farmers") [
        spillover-infection-farmers
      ]
      if (spillover-group = "all") [
        spillover-infection-farmers
      ]
    ] 
    [
      set totalspilloveranimalhumaninfections 0
    ])
  ]
end

; Creating separate functions for spillover

; Randomly choose one subgroup from the following subgroups
; to spillover infection to:
; working adults Ix?3xx age groups 6-8 with age 25-65yr
; All genders none I1xxxx, male I2xxxx and female I3xxxx
; both non-pregnant Ixxx1x and pregnant Ixxx2x people
; both household Ixxxx1 and non-household Ixxxx2
to spillover-infection-farmers

  ; Randomly selecting a subgroup from age groups 25-60 years
  let spillover-subgroup one-of [
    "I26311" "I26312" "I36311" "I36312" "I36322" ; Age group 6: 25-35yr
    "I17311" "I17312" ; Age group 7: 35-50yr
    "I18311" "I18312" ; Age group 8: 50-60yr
  ]

  run (word "set " spillover-subgroup " " spillover-subgroup " + new-hum-spillover-infc")
end
